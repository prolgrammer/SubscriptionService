// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go
//
// Generated by this command:
//
//	mockgen -source=contracts.go --destination=mock_test.go -package=usecases
//

// Package usecases is a generated GoMock package.
package usecases

import (
	context "context"
	reflect "reflect"
	entities "subscription_service/internal/entities"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockCreateSubRepository is a mock of CreateSubRepository interface.
type MockCreateSubRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCreateSubRepositoryMockRecorder
	isgomock struct{}
}

// MockCreateSubRepositoryMockRecorder is the mock recorder for MockCreateSubRepository.
type MockCreateSubRepositoryMockRecorder struct {
	mock *MockCreateSubRepository
}

// NewMockCreateSubRepository creates a new mock instance.
func NewMockCreateSubRepository(ctrl *gomock.Controller) *MockCreateSubRepository {
	mock := &MockCreateSubRepository{ctrl: ctrl}
	mock.recorder = &MockCreateSubRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateSubRepository) EXPECT() *MockCreateSubRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockCreateSubRepository) Insert(ctx context.Context, sub *entities.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, sub)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockCreateSubRepositoryMockRecorder) Insert(ctx, sub any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCreateSubRepository)(nil).Insert), ctx, sub)
}

// MockDeleteSubRepository is a mock of DeleteSubRepository interface.
type MockDeleteSubRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteSubRepositoryMockRecorder
	isgomock struct{}
}

// MockDeleteSubRepositoryMockRecorder is the mock recorder for MockDeleteSubRepository.
type MockDeleteSubRepositoryMockRecorder struct {
	mock *MockDeleteSubRepository
}

// NewMockDeleteSubRepository creates a new mock instance.
func NewMockDeleteSubRepository(ctrl *gomock.Controller) *MockDeleteSubRepository {
	mock := &MockDeleteSubRepository{ctrl: ctrl}
	mock.recorder = &MockDeleteSubRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteSubRepository) EXPECT() *MockDeleteSubRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDeleteSubRepository) Delete(ctx context.Context, subID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, subID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDeleteSubRepositoryMockRecorder) Delete(ctx, subID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeleteSubRepository)(nil).Delete), ctx, subID)
}

// MockUpdateSubRepository is a mock of UpdateSubRepository interface.
type MockUpdateSubRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateSubRepositoryMockRecorder
	isgomock struct{}
}

// MockUpdateSubRepositoryMockRecorder is the mock recorder for MockUpdateSubRepository.
type MockUpdateSubRepositoryMockRecorder struct {
	mock *MockUpdateSubRepository
}

// NewMockUpdateSubRepository creates a new mock instance.
func NewMockUpdateSubRepository(ctrl *gomock.Controller) *MockUpdateSubRepository {
	mock := &MockUpdateSubRepository{ctrl: ctrl}
	mock.recorder = &MockUpdateSubRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateSubRepository) EXPECT() *MockUpdateSubRepositoryMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockUpdateSubRepository) Update(ctx context.Context, sub *entities.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, sub)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUpdateSubRepositoryMockRecorder) Update(ctx, sub any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUpdateSubRepository)(nil).Update), ctx, sub)
}

// MockGetSubRepository is a mock of GetSubRepository interface.
type MockGetSubRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGetSubRepositoryMockRecorder
	isgomock struct{}
}

// MockGetSubRepositoryMockRecorder is the mock recorder for MockGetSubRepository.
type MockGetSubRepositoryMockRecorder struct {
	mock *MockGetSubRepository
}

// NewMockGetSubRepository creates a new mock instance.
func NewMockGetSubRepository(ctrl *gomock.Controller) *MockGetSubRepository {
	mock := &MockGetSubRepository{ctrl: ctrl}
	mock.recorder = &MockGetSubRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetSubRepository) EXPECT() *MockGetSubRepositoryMockRecorder {
	return m.recorder
}

// SelectByID mocks base method.
func (m *MockGetSubRepository) SelectByID(ctx context.Context, subID string) (entities.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByID", ctx, subID)
	ret0, _ := ret[0].(entities.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID.
func (mr *MockGetSubRepositoryMockRecorder) SelectByID(ctx, subID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockGetSubRepository)(nil).SelectByID), ctx, subID)
}

// MockGetAllSubsRepository is a mock of GetAllSubsRepository interface.
type MockGetAllSubsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGetAllSubsRepositoryMockRecorder
	isgomock struct{}
}

// MockGetAllSubsRepositoryMockRecorder is the mock recorder for MockGetAllSubsRepository.
type MockGetAllSubsRepositoryMockRecorder struct {
	mock *MockGetAllSubsRepository
}

// NewMockGetAllSubsRepository creates a new mock instance.
func NewMockGetAllSubsRepository(ctrl *gomock.Controller) *MockGetAllSubsRepository {
	mock := &MockGetAllSubsRepository{ctrl: ctrl}
	mock.recorder = &MockGetAllSubsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetAllSubsRepository) EXPECT() *MockGetAllSubsRepositoryMockRecorder {
	return m.recorder
}

// SelectAll mocks base method.
func (m *MockGetAllSubsRepository) SelectAll(ctx context.Context, limit, offset int) ([]entities.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAll", ctx, limit, offset)
	ret0, _ := ret[0].([]entities.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAll indicates an expected call of SelectAll.
func (mr *MockGetAllSubsRepositoryMockRecorder) SelectAll(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAll", reflect.TypeOf((*MockGetAllSubsRepository)(nil).SelectAll), ctx, limit, offset)
}

// MockCalculateTotalCostRepository is a mock of CalculateTotalCostRepository interface.
type MockCalculateTotalCostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCalculateTotalCostRepositoryMockRecorder
	isgomock struct{}
}

// MockCalculateTotalCostRepositoryMockRecorder is the mock recorder for MockCalculateTotalCostRepository.
type MockCalculateTotalCostRepositoryMockRecorder struct {
	mock *MockCalculateTotalCostRepository
}

// NewMockCalculateTotalCostRepository creates a new mock instance.
func NewMockCalculateTotalCostRepository(ctrl *gomock.Controller) *MockCalculateTotalCostRepository {
	mock := &MockCalculateTotalCostRepository{ctrl: ctrl}
	mock.recorder = &MockCalculateTotalCostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalculateTotalCostRepository) EXPECT() *MockCalculateTotalCostRepositoryMockRecorder {
	return m.recorder
}

// CalculateTotalCost mocks base method.
func (m *MockCalculateTotalCostRepository) CalculateTotalCost(ctx context.Context, startPeriod, endPeriod time.Time, userID, serviceName *string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateTotalCost", ctx, startPeriod, endPeriod, userID, serviceName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateTotalCost indicates an expected call of CalculateTotalCost.
func (mr *MockCalculateTotalCostRepositoryMockRecorder) CalculateTotalCost(ctx, startPeriod, endPeriod, userID, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateTotalCost", reflect.TypeOf((*MockCalculateTotalCostRepository)(nil).CalculateTotalCost), ctx, startPeriod, endPeriod, userID, serviceName)
}
